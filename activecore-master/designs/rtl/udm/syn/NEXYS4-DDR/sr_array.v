// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sr_array,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.465000,HLS_SYN_LAT=22,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=137,HLS_SYN_LUT=303,HLS_VERSION=2019_2}" *)

module sr_array (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_address0,
        x_ce0,
        x_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] x_address0;
output   x_ce0;
input  [31:0] x_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg x_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] i_fu_78_p2;
reg   [3:0] i_reg_170;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln6_fu_72_p2;
wire   [64:0] mul_ln11_fu_93_p2;
reg   [64:0] mul_ln11_reg_180;
reg   [28:0] tmp_reg_185;
wire   [31:0] sr_1_fu_109_p2;
wire    ap_CS_fsm_state3;
reg   [3:0] i_0_reg_49;
reg  signed [31:0] sr_0_reg_60;
wire   [63:0] zext_ln8_fu_84_p1;
wire  signed [31:0] mul_ln11_fu_93_p0;
wire    ap_CS_fsm_state4;
wire   [64:0] sub_ln11_fu_115_p2;
wire   [28:0] tmp_3_fu_128_p4;
wire   [0:0] tmp_2_fu_120_p3;
wire  signed [31:0] sext_ln11_1_fu_138_p1;
wire  signed [31:0] sext_ln11_2_fu_142_p1;
wire   [31:0] select_ln11_fu_145_p3;
wire   [31:0] sub_ln11_1_fu_153_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_49 <= i_reg_170;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_49 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sr_0_reg_60 <= sr_1_fu_109_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sr_0_reg_60 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_170 <= i_fu_78_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_72_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        mul_ln11_reg_180[64 : 1] <= mul_ln11_fu_93_p2[64 : 1];
        tmp_reg_185 <= {{mul_ln11_fu_93_p2[64:36]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln6_fu_72_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_return = ((tmp_2_fu_120_p3[0:0] === 1'b1) ? sub_ln11_1_fu_153_p2 : sext_ln11_2_fu_142_p1);

assign i_fu_78_p2 = (i_0_reg_49 + 4'd1);

assign icmp_ln6_fu_72_p2 = ((i_0_reg_49 == 4'd10) ? 1'b1 : 1'b0);

assign mul_ln11_fu_93_p0 = sr_0_reg_60;

assign mul_ln11_fu_93_p2 = ($signed(mul_ln11_fu_93_p0) * $signed(65'h19999999A));

assign select_ln11_fu_145_p3 = ((tmp_2_fu_120_p3[0:0] === 1'b1) ? sext_ln11_1_fu_138_p1 : sext_ln11_2_fu_142_p1);

assign sext_ln11_1_fu_138_p1 = $signed(tmp_3_fu_128_p4);

assign sext_ln11_2_fu_142_p1 = $signed(tmp_reg_185);

assign sr_1_fu_109_p2 = ($signed(x_q0) + $signed(sr_0_reg_60));

assign sub_ln11_1_fu_153_p2 = (32'd0 - select_ln11_fu_145_p3);

assign sub_ln11_fu_115_p2 = (65'd0 - mul_ln11_reg_180);

assign tmp_2_fu_120_p3 = sr_0_reg_60[32'd31];

assign tmp_3_fu_128_p4 = {{sub_ln11_fu_115_p2[64:36]}};

assign x_address0 = zext_ln8_fu_84_p1;

assign zext_ln8_fu_84_p1 = i_0_reg_49;

always @ (posedge ap_clk) begin
    mul_ln11_reg_180[0] <= 1'b0;
end

endmodule //sr_array
